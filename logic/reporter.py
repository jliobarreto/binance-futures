# reporter.py

import pandas as pd
from datetime import datetime
from pathlib import Path
import logging
from utils.file_manager import append_csv
from utils.path import LOGS_DIR

def exportar_resultados_excel(resultados: list[dict], carpeta: str = "output") -> str:
    """
    Exporta los resultados a un archivo Excel ordenado por score.
    """
    if not resultados:
        return ""

    df = pd.DataFrame(resultados).sort_values("Score", ascending=False)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    Path(carpeta).mkdir(parents=True, exist_ok=True)
    archivo = f"{carpeta}/se√±ales_long_short_{timestamp}.xlsx"
    df.to_excel(archivo, index=False)
    ruta = str(Path(archivo).resolve())
    logging.info(f"Archivo Excel exportado en {ruta}")
    return archivo

def exportar_resultados_csv(resultados: list[dict], carpeta: str = "output") -> str:
    """
    Exporta los resultados a un archivo CSV ordenado por score.
    """
    if not resultados:
        return ""

    df = pd.DataFrame(resultados).sort_values("Score", ascending=False)
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M")
    Path(carpeta).mkdir(parents=True, exist_ok=True)
    archivo = f"{carpeta}/se√±ales_long_short_{timestamp}.csv"
    df.to_csv(archivo, index=False)
    ruta = str(Path(archivo).resolve())
    logging.info(f"Archivo CSV exportado en {ruta}")
    return archivo

def imprimir_resumen_terminal(
    resultados: list[dict], evaluados: int | None = None, score_max: float | None = None
) -> None:
    """Imprime un resumen de los resultados en consola para validaci√≥n r√°pida.

    Cuando no se encuentran oportunidades v√°lidas tambi√©n se informa cu√°ntos
    s√≠mbolos fueron evaluados y, de proporcionarse, el score m√°ximo obtenido.
    """
    if not resultados:
        mensaje = "No se encontraron oportunidades v√°lidas."
        if evaluados is not None:
            mensaje += f" Se evaluaron {evaluados} s√≠mbolos."
        if score_max is not None:
            mensaje += f" Score m√°ximo observado: {score_max:.2f}."
        logging.info(mensaje)
        return

    logging.info("\nüîç Resumen de se√±ales generadas:")
    for r in resultados:
        logging.info(
            f"‚úÖ {r['Criptomoneda']} | Tipo: {r['Se√±al']} | Score: {r['Score']} | Entrada: {r['Precio']:.4f} | TP: {r['TP']:.4f} | SL: {r['SL']:.4f}"
        )

def registrar_contexto_csv(datos: dict, archivo: str | Path = LOGS_DIR / "context_summary.csv") -> str:
    """Guarda un resumen del contexto de mercado en un CSV."""
    path = Path(archivo)
    path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        append_csv(list(datos.keys()), path)
    append_csv([str(datos[k]) for k in datos.keys()], path)
    ruta = str(path.resolve())
    logging.info(f"Contexto macro registrado en {ruta}")
    return ruta

def registrar_signal(data: dict, motivo: str = "", archivo: str | Path = LOGS_DIR / "signals.csv") -> str:
    """Registra el resultado de una se√±al, aceptada o descartada."""
    path = Path(archivo)
    path.parent.mkdir(parents=True, exist_ok=True)
    if not path.exists():
        append_csv(["fecha", "symbol", "score", "estado", "motivo"], path)
    fila = [
        datetime.utcnow().isoformat(timespec="seconds"),
        data.get("symbol") or data.get("Criptomoneda"),
        str(data.get("score") or data.get("Score", "")),
        "descartada" if motivo else "aceptada",
        motivo,
    ]
    append_csv(fila, path)
    ruta = str(path.resolve())
    logging.debug(f"Signal registrada en {ruta}")
    return ruta
